import os
from typing import List, Dict
from langchain.embeddings import OpenAIEmbeddings
from langchain.vectorstores import Chroma
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.chains import RetrievalQA
from langchain.chat_models import ChatOpenAI
from dotenv import load_dotenv

class RAGEngine:
    def __init__(self, persist_directory: str = "./data/vector_db"):
        load_dotenv()
        
        # Initialize OpenAI components
        self.embeddings = OpenAIEmbeddings()
        self.llm = ChatOpenAI(temperature=0)
        
        # Initialize vector store
        self.persist_directory = persist_directory
        self.vectorstore = Chroma(
            persist_directory=persist_directory,
            embedding_function=self.embeddings
        )
        
        # Initialize text splitter
        self.text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=1000,
            chunk_overlap=200
        )
        
        # Initialize QA chain
        self.qa_chain = RetrievalQA.from_chain_type(
            llm=self.llm,
            chain_type="stuff",
            retriever=self.vectorstore.as_retriever()
        )

    def add_documents(self, texts: List[str], metadata: List[Dict] = None):
        """
        Add documents to the vector store
        
        Args:
            texts: List of text documents to add
            metadata: Optional list of metadata dictionaries for each document
        """
        # Split texts into chunks
        docs = self.text_splitter.create_documents(texts, metadatas=metadata)
        
        # Add to vector store
        self.vectorstore.add_documents(docs)
        self.vectorstore.persist()

    def query(self, question: str) -> str:
        """
        Query the RAG system with a question
        
        Args:
            question: The question to ask
            
        Returns:
            The answer generated by the RAG system
        """
        return self.qa_chain.run(question)

    def clear(self):
        """Clear all documents from the vector store"""
        self.vectorstore = Chroma(
            persist_directory=self.persist_directory,
            embedding_function=self.embeddings
        ) 